'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var ProtectedMap =
/*#__PURE__*/
function () {
  function ProtectedMap(data, config) {
    _classCallCheck(this, ProtectedMap);

    this.data = data;
    this.map = this.convertToMap(data);
    this.config = config;
    this.modifyMappedState = this.modifyMappedState.bind(this);
    this.getValue = this.getValue.bind(this);
    this.setValue = this.setValue.bind(this);
  }

  _createClass(ProtectedMap, [{
    key: "getReturnValues",
    value: function getReturnValues() {
      var complexKeysEnabled = this.config.complexKeysEnabled;

      if (complexKeysEnabled) {
        return [this.getValue, this.setValue];
      }

      var values = _toConsumableArray(this.map.entries()).reduce(function (values, _ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            map = _ref2[1];

        return _objectSpread2({}, values, _defineProperty({}, key, map.get(key)));
      }, {});

      return [values, this.modifyMappedState];
    }
  }, {
    key: "convertToMap",
    value: function convertToMap(data) {
      var dataToProcess = Array.isArray(data) ? data : Object.entries(data);
      var map = new Map();
      dataToProcess.map(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
            key = _ref4[0],
            val = _ref4[1];

        var _React$useState = React.useState(val),
            _React$useState2 = _slicedToArray(_React$useState, 2),
            stateVal = _React$useState2[0],
            stateSetter = _React$useState2[1];

        map.set(key, new Map([[key, stateVal], ["stateSetter", stateSetter]]));
      });
      return map;
    }
  }, {
    key: "modifyMappedState",
    value: function modifyMappedState(prop, val) {
      var data = this.map.get(prop);
      var setter = data.get("stateSetter");
      setter(val);
    }
  }, {
    key: "getValue",
    value: function getValue(key) {
      if (this.map.has(key)) {
        return this.map.get(key).get(key);
      }

      return undefined;
    }
  }, {
    key: "setValue",
    value: function setValue(key, val) {
      if (this.map.has(key)) {
        var innerMap = this.map.get(key);
        var setter = innerMap.get("stateSetter");
        setter(val);
      }

      return undefined;
    }
  }]);

  return ProtectedMap;
}();

var useMappedState = function useMappedState(data) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    complexKeysEnabled: false
  };
  var protectedMap = new ProtectedMap(data, config);
  return protectedMap.getReturnValues();
};

exports.useMappedState = useMappedState;
//# sourceMappingURL=index.js.map
